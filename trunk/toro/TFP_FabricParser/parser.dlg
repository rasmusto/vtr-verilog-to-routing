<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: TFP_FabricGrammar.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "tokens.h"
#include "AToken.h"

#include <stdio.h>

#include "stdpccts.h"
#include "GenericTokenBuffer.h"

#include "TC_SideName.h"

#include "TFM_FabricModel.h"

#include "TFP_FabricFile.h"
#include "TFP_FabricScanner_c.h"
>>

<<%%parserclass TFP_FabricParser_c>>


%%START

@
	<<
		return END_OF_FILE;
	>>

[\ \t]+
	<<
    skip( );   
		return (ANTLRTokenType)5;
	>>

//~[\n]*[\n]
	<<
    skip( ); newline( );   
		return CPP_COMMENT;
	>>

#~[\n]*[\n]
	<<
    skip( ); newline( );   
		return BLOCK_COMMENT;
	>>

[\n\\]
	<<
    skip( ); newline( );   
		return NEW_LINE;
	>>

\"
	<<
    mode( QUOTED_VALUE );   
		return OPEN_QUOTE;
	>>

=
	<<
		return EQUAL;
	>>

[Ff][Aa][Bb][Rr][Ii][Cc]
	<<
		return FABRIC;
	>>

[Cc][Oo][Nn][Ff][Ii][Gg]
	<<
		return CONFIG;
	>>

[Ii]{[Nn][Pp][Uu][Tt]}[Oo]{[Uu][Tt][Pp][Uu][Tt]}
	<<
		return IO;
	>>

[Pp]{[Hh][Yy][Ss][Ii][Cc][Aa][Ll]}[Bb]{[Ll][Oo][Cc][Kk]}
	<<
		return PB;
	>>

[Ss]{[Ww][Ii][Tt][Cc][Hh]}[Bb]{[Oo][Xx]{[Ee][Ss]}}
	<<
		return SB;
	>>

[Cc]{[Oo][Nn][Nn][Ee][Cc][Tt][Ii][Oo][Nn]}[Bb]{[Oo][Xx]{[Ee][Ss]}}
	<<
		return CB;
	>>

[Cc][Hh][Aa][Nn][Nn][Ee][Ll]{[Ss]}
	<<
		return CHANNEL;
	>>

[Ss][Ee][Gg][Mm][Ee][Nn][Tt]{[Ss]}
	<<
		return SEGMENT;
	>>

{[Ff][Aa][Bb][Rr][Ii][Cc][_]}[Ss][Ii][Zz][Ee]
	<<
		return SIZE;
	>>

[Cc][Oo][Uu][Nn][Tt]
	<<
		return COUNT;
	>>

[Ww][Ii][Dd][Tt][Hh]
	<<
		return WIDTH;
	>>

[Hh][Ee][Ii][Gg][Hh][Tt]
	<<
		return HEIGHT;
	>>

[Ss][Ii][Dd][Ee]
	<<
		return SIDE;
	>>

[Oo][Ff][Ff][Ss][Ee][Tt]
	<<
		return OFFSET;
	>>

[Ii][Nn][Dd][Ee][Xx]
	<<
		return INDEX;
	>>

[Ss][Ll][Ii][Cc][Ee]
	<<
		return SLICE;
	>>

[Cc][Aa][Pp][Aa][Cc][Ii][Tt][Yy]
	<<
		return CAPACITY;
	>>

[Cc][Ee][Ll][Ll]
	<<
		return CELL;
	>>

[Mm][Aa][Ss][Tt][Ee][Rr]
	<<
		return MASTER;
	>>

[Pp][Ii][Nn]
	<<
		return PIN;
	>>

[Mm][Aa][Pp][Pp][Ii][Nn][Gg]
	<<
		return MAPPING;
	>>

[Ll][Ii][Nn][Ee]
	<<
		return LINE;
	>>

[Rr][Ee][Gg][Ii][Oo][Nn]
	<<
		return REGION;
	>>

[Oo][Rr][Ii][Ee][Nn][Tt]
	<<
		return ORIENT;
	>>

[Tt][Ii][Mm][Ii][Nn][Gg]{[_][Aa][Nn][Aa][Ll][Yy][Ss][Ii][Ss]}
	<<
		return TIMING;
	>>

[Rr]
	<<
		return R;
	>>

[Rr][Ee][Ss]
	<<
		return RES;
	>>

[Cc]{[Aa][Pp]}
	<<
		return CAP;
	>>

[Cc]{[Aa][Pp]}{[_]}[Ii][Nn]
	<<
		return CAP_IN;
	>>

[Cc]{[Aa][Pp]}{[_]}[Oo][Uu][Tt]
	<<
		return CAP_OUT;
	>>

[Tt]
	<<
		return T;
	>>

[Dd][Ee][Ll][Aa][Yy]{[_][Ii][Nn]}
	<<
		return DELAY;
	>>

[Hh]{[Oo][Rr]{[Ii]}[Zz]{[Oo][Nn][Tt][Aa][Ll]}}
	<<
		return HORIZONTAL;
	>>

[Vv]{[Ee][Rr][Tt]{[Ii][Cc][Aa][Ll]}}
	<<
		return VERTICAL;
	>>

[Ll]{[Ee][Ff][Tt]}
	<<
		return LEFT;
	>>

[Rr]{[Ii][Gg][Hh][Tt]}
	<<
		return RIGHT;
	>>

[Ll][Oo][Ww][Ee][Rr]
	<<
		return LOWER;
	>>

[Uu][Pp][Pp][Ee][Rr]
	<<
		return UPPER;
	>>

[Bb]{[Oo][Tt][Tt][Oo][Mm]}
	<<
		return BOTTOM;
	>>

[Tt]{[Oo][Pp]}
	<<
		return TOP;
	>>

[01]
	<<
		return BIT_CHAR;
	>>

[\-][0-9]+
	<<
		return NEG_INT;
	>>

[0-9]+
	<<
		return POS_INT;
	>>

{\-}{[0-9]+}.[0-9]+
	<<
		return FLOAT;
	>>

{\-}{[0-9]+}.[0-9]+[Ee][\+\-][0-9]+
	<<
		return EXP;
	>>

[a-zA-Z_/\|][a-zA-Z0-9_/\|\(\)\[\]\.\+\-\~]*
	<<
		return STRING;
	>>

<
	<<
		return (ANTLRTokenType)58;
	>>

>
	<<
		return (ANTLRTokenType)59;
	>>

</
	<<
		return (ANTLRTokenType)60;
	>>

/>
	<<
		return (ANTLRTokenType)61;
	>>


%%QUOTED_VALUE

@
	<<
		return END_OF_FILE;
	>>

\"
	<<
    mode( START );   
		return CLOSE_QUOTE;
	>>

~[\"\n]+
	<<
		return STRING;
	>>

[\n]
	<<
		return UNCLOSED_STRING;
	>>

%%
