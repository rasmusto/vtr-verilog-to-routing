<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: antlr.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-1994
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR7
 */

#include <stdio.h>
#define ANTLR_VERSION	133MR7

#include "config.h"
#include "set.h"
#include <ctype.h>
#include "syn.h"
#include "hash.h"
#include "generic.h"
#define zzcr_attr(attr,tok,t)
#include "antlr.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD
void zzerraction()
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>

<<%%lexaction

/* maintained, but not used for now */
set AST_nodes_refd_in_actions = set_init;
int inAlt = 0;
set attribsRefdFromAction;
int UsedOldStyleAttrib = 0;
int UsedNewStyleLabel = 0;
#ifdef __USE_PROTOS
char *inline_set(char *);
#else
char *inline_set();
#endif

/* MR1	10-Apr-97  MR1  Previously unable to put right shift operator	    */
/* MR1					in DLG action			                    */

int tokenActionActive=0;                                             /* MR1 */
>>


%%START

@
	<<
		NLA = Eof;
		/* L o o k  F o r  A n o t h e r  F i l e */
		{
			FILE *new_input;
			new_input = NextFile();
			if ( new_input == NULL ) { NLA=Eof; return; }
			fclose( input );
			input = new_input;
			zzrdstream( input );
			zzskip();	/* Skip the Eof (@) char i.e continue */
		}
	>>

[\t\ ]+
	<<
		NLA = 74;
		zzskip();   
	>>

[\n\r]
	<<
		NLA = 75;
		zzline++; zzskip();   
	>>

\[
	<<
		NLA = 76;
		zzmode(ACTIONS); zzmore();
		istackreset();
		pushint(']');   
	>>

\<\<
	<<
		NLA = 77;
		action_file=CurFile; action_line=zzline;
		zzmode(ACTIONS); zzmore();
		istackreset();
		pushint('>');   
	>>

\"
	<<
		NLA = 78;
		zzmode(STRINGS); zzmore();   
	>>

/\*
	<<
		NLA = 79;
		zzmode(COMMENTS); zzskip();   
	>>

\*/
	<<
		NLA = 80;
		warn("Missing /*; found dangling */"); zzskip();   
	>>

//
	<<
		NLA = 81;
		zzmode(CPP_COMMENTS); zzskip();   
	>>

\>\>
	<<
		NLA = 82;
		warn("Missing <<; found dangling \>\>"); zzskip();   
	>>

.
	<<
		NLA = WildCard;
	>>

\@
	<<
		NLA = 84;
		FoundException = 1;		/* MR6 */
		FoundAtOperator = 1;  
	>>

#header
	<<
		NLA = 88;
	>>

#parser
	<<
		NLA = 89;
	>>

#tokdefs
	<<
		NLA = 90;
	>>

\}
	<<
		NLA = 91;
	>>

class
	<<
		NLA = 92;
	>>

\{
	<<
		NLA = 95;
	>>

!
	<<
		NLA = 96;
	>>

\<
	<<
		NLA = 97;
	>>

\>
	<<
		NLA = 98;
	>>

:
	<<
		NLA = 99;
	>>

;
	<<
		NLA = 100;
	>>

#lexaction
	<<
		NLA = 101;
	>>

#lexmember
	<<
		NLA = 102;
	>>

#lexprefix
	<<
		NLA = 103;
	>>

#lexclass
	<<
		NLA = 104;
	>>

#errclass
	<<
		NLA = 105;
	>>

#tokclass
	<<
		NLA = 106;
	>>

#token
	<<
		NLA = 107;
	>>

=
	<<
		NLA = 108;
	>>

[0-9]+
	<<
		NLA = 109;
	>>

\|
	<<
		NLA = 110;
	>>

\~
	<<
		NLA = 111;
	>>

..
	<<
		NLA = 112;
	>>

^
	<<
		NLA = 113;
	>>

#pragma
	<<
		NLA = 114;
	>>

approx
	<<
		NLA = 115;
	>>

LL(1)
	<<
		NLA = 116;
	>>

LL(2)
	<<
		NLA = 117;
	>>

\(
	<<
		NLA = 118;
	>>

\)
	<<
		NLA = 119;
	>>

\*
	<<
		NLA = 120;
	>>

\+
	<<
		NLA = 121;
	>>

?
	<<
		NLA = 122;
	>>

=>
	<<
		NLA = 123;
	>>

exception
	<<
		NLA = 124;
	>>

default
	<<
		NLA = 125;
	>>

catch
	<<
		NLA = 126;
	>>

[a-z] [A-Za-z0-9_]*
	<<
		NLA = NonTerminal;
		
		while ( zzchar==' ' || zzchar=='\t' ) {
			zzadvance();
		}
		if ( zzchar == ':' && inAlt ) NLA = LABEL;
	>>

[A-Z] [A-Za-z0-9_]*
	<<
		NLA = TokenTerm;
		
		while ( zzchar==' ' || zzchar=='\t' ) {
			zzadvance();
		}
		if ( zzchar == ':' && inAlt ) NLA = LABEL;
	>>

#[A-Za-z0-9_]*
	<<
		NLA = 127;
		warn(eMsg1("unknown meta-op: %s",LATEXT(1))); zzskip();   
	>>


%%STRINGS

@
	<<
		NLA = Eof;
	>>

\"
	<<
		NLA = QuotedTerm;
		zzmode(START);   
	>>

[\n\r]
	<<
		NLA = 3;
		
		zzline++;
		warn("eoln found in string");
		zzskip();
	>>

\\[\n\r]
	<<
		NLA = 4;
		zzline++; zzmore();   
	>>

\\~[]
	<<
		NLA = 5;
		zzmore();   
	>>

~[\n\r\"\\]+
	<<
		NLA = 6;
		zzmore();   
	>>


%%ACTION_STRINGS

@
	<<
		NLA = Eof;
	>>

\"
	<<
		NLA = 7;
		zzmode(ACTIONS); zzmore();   
	>>

[\n\r]
	<<
		NLA = 8;
		
		zzline++;
		warn("eoln found in string (in user action)");
		zzskip();
	>>

\\[\n\r]
	<<
		NLA = 9;
		zzline++; zzmore();   
	>>

\\~[]
	<<
		NLA = 10;
		zzmore();   
	>>

~[\n\r\"\\]+
	<<
		NLA = 11;
		zzmore();   
	>>


%%ACTION_CHARS

@
	<<
		NLA = Eof;
	>>

'
	<<
		NLA = 12;
		zzmode(ACTIONS); zzmore();   
	>>

[\n\r]
	<<
		NLA = 13;
		
		zzline++;
		warn("eoln found in char literal (in user action)");
		zzskip();
	>>

\\~[]
	<<
		NLA = 14;
		zzmore();   
	>>

~[\n\r'\\]+
	<<
		NLA = 15;
		zzmore();   
	>>


%%ACTION_COMMENTS

@
	<<
		NLA = Eof;
	>>

\*/
	<<
		NLA = 16;
		zzmode(ACTIONS); zzmore();   
	>>

\*
	<<
		NLA = 17;
		zzmore();   
	>>

[\n\r]
	<<
		NLA = 18;
		zzline++; zzmore(); DAWDLE;   
	>>

~[\n\r\*]+
	<<
		NLA = 19;
		zzmore();   
	>>


%%TOK_DEF_COMMENTS

@
	<<
		NLA = Eof;
	>>

\*/
	<<
		NLA = 20;
		zzmode(PARSE_ENUM_FILE);  
		zzmore();   
	>>

\*
	<<
		NLA = 21;
		zzmore();   
	>>

[\n\r]
	<<
		NLA = 22;
		zzline++; zzmore(); DAWDLE;   
	>>

~[\n\r\*]+
	<<
		NLA = 23;
		zzmore();   
	>>


%%TOK_DEF_CPP_COMMENTS

@
	<<
		NLA = Eof;
	>>

[\n\r]
	<<
		NLA = 24;
		zzline++; zzmode(PARSE_ENUM_FILE); zzskip(); DAWDLE;   
	>>

~[\n\r]+
	<<
		NLA = 25;
		zzskip();   
	>>


%%ACTION_CPP_COMMENTS

@
	<<
		NLA = Eof;
	>>

[\n\r]
	<<
		NLA = 26;
		zzline++; zzmode(ACTIONS); zzmore(); DAWDLE;   
	>>

~[\n\r]+
	<<
		NLA = 27;
		zzmore();   
	>>


%%CPP_COMMENTS

@
	<<
		NLA = Eof;
	>>

[\n\r]
	<<
		NLA = 28;
		zzline++; zzmode(START); zzskip(); DAWDLE;   
	>>

~[\n\r]+
	<<
		NLA = 29;
		zzskip();   
	>>


%%COMMENTS

@
	<<
		NLA = Eof;
	>>

\*/
	<<
		NLA = 30;
		zzmode(START); zzskip();   
	>>

\*
	<<
		NLA = 31;
		zzskip();   
	>>

[\n\r]
	<<
		NLA = 32;
		zzline++; zzskip(); DAWDLE;   
	>>

~[\n\r\*]+
	<<
		NLA = 33;
		zzskip();   
	>>


%%ACTIONS

@
	<<
		NLA = Eof;
	>>

\>\>
	<<
		NLA = Action;
		/* these do not nest */
		zzmode(START);
		NLATEXT[0] = ' ';
		NLATEXT[1] = ' ';
		zzbegexpr[0] = ' ';
		zzbegexpr[1] = ' ';
		if ( zzbufovf ) {
			err( eMsgd("action buffer overflow; size %d",ZZLEXBUFSIZE));
		}
		
/* MR1	10-Apr-97  MR1  Previously unable to put right shift operator	*/
		/* MR1					in DLG action			*/
		/* MR1			Doesn't matter what kind of action it is - reset*/
		
			      tokenActionActive=0;		 /* MR1 */
	>>

\>\>?
	<<
		NLA = Pred;
		/* these do not nest */
		zzmode(START);
		NLATEXT[0] = ' ';
		NLATEXT[1] = ' ';
		zzbegexpr[0] = '\0';
		if ( zzbufovf ) {
			err( eMsgd("predicate buffer overflow; size %d",ZZLEXBUFSIZE));
		}
	>>

\]
	<<
		NLA = PassAction;
		if ( topint() == ']' ) {
			popint();
			if ( istackempty() )	/* terminate action */
			{
				zzmode(START);
				NLATEXT[0] = ' ';
				zzbegexpr[0] = ' ';
				if ( zzbufovf ) {
					err( eMsgd("parameter buffer overflow; size %d",ZZLEXBUFSIZE));
				}
			}
			else {
				/* terminate $[..] and #[..] */
				if ( GenCC ) zzreplstr("))");
				else zzreplstr(")");
				zzmore();
			}
		}
		else if ( topint() == '|' ) { /* end of simple [...] */
			popint();
			zzmore();
		}
		else zzmore();
	>>

consumeUntil\( [\ \t]* \{~[\}]+\} [\ \t]* \)
	<<
		NLA = 37;
		
		zzmore();
		zzreplstr(inline_set(zzbegexpr+
		strlen("consumeUntil(")));
	>>

consumeUntil\( ~[\)]+ \)
	<<
		NLA = 38;
		zzmore();   
	>>

[\n\r]
	<<
		NLA = 39;
		zzline++; zzmore(); DAWDLE;   
	>>

\>
	<<
		NLA = 40;
		zzmore();   
	>>

$
	<<
		NLA = 41;
		zzmore();   
	>>

$$
	<<
		NLA = 42;
		if ( !GenCC ) {zzreplstr("zzaRet"); zzmore();}
		else err("$$ use invalid in C++ mode");   
	>>

$\[\]
	<<
		NLA = 43;
		if ( !GenCC ) {zzreplstr("zzempty_attr"); zzmore();}
		else err("$[] use invalid in C++ mode");   
	>>

$\[
	<<
		NLA = 44;
		
		pushint(']');
		if ( !GenCC ) zzreplstr("zzconstr_attr(");
		else err("$[..] use invalid in C++ mode");
		zzmore();
	>>

$[0-9]+
	<<
		NLA = 45;
		{
			static char buf[100];
			if ( strlen(zzbegexpr)>(size_t)85 )
			fatal("$i attrib ref too big");
			set_orel(atoi(zzbegexpr+1), &attribsRefdFromAction);
			if ( !GenCC ) sprintf(buf,"zzaArg(zztasp%d,%s)",
			BlkLevel-1,zzbegexpr+1);
			else sprintf(buf,"_t%d%s",
			BlkLevel-1,zzbegexpr+1);
			zzreplstr(buf);
			zzmore();
			UsedOldStyleAttrib = 1;
			if ( UsedNewStyleLabel )
			err("cannot mix old-style $i with new-style labels");
		}
	>>

$[0-9]+.
	<<
		NLA = 46;
		{
			static char buf[100];
			if ( strlen(zzbegexpr)>(size_t)85 )
			fatal("$i.field attrib ref too big");
			zzbegexpr[strlen(zzbegexpr)-1] = ' ';
			set_orel(atoi(zzbegexpr+1), &attribsRefdFromAction);
			if ( !GenCC ) sprintf(buf,"zzaArg(zztasp%d,%s).",
			BlkLevel-1,zzbegexpr+1);
			else sprintf(buf,"_t%d%s.",
			BlkLevel-1,zzbegexpr+1);
			zzreplstr(buf);
			zzmore();
			UsedOldStyleAttrib = 1;
			if ( UsedNewStyleLabel )
			err("cannot mix old-style $i with new-style labels");
		}
	>>

$[0-9]+.[0-9]+
	<<
		NLA = 47;
		{
			static char buf[100];
			static char i[20], j[20];
			char *p,*q;
			if (strlen(zzbegexpr)>(size_t)85) fatal("$i.j attrib ref too big");
			for (p=zzbegexpr+1,q= &i[0]; *p!='.'; p++) {
				if ( q == &i[20] )
				fatalFL("i of $i.j attrib ref too big",
				FileStr[CurFile], zzline );
				*q++ = *p;
			}
			*q = '\0';
			for (p++, q= &j[0]; *p!='\0'; p++) {
				if ( q == &j[20] )
				fatalFL("j of $i.j attrib ref too big",
				FileStr[CurFile], zzline );
				*q++ = *p;
			}
			*q = '\0';
			if ( !GenCC ) sprintf(buf,"zzaArg(zztasp%s,%s)",i,j);
			else sprintf(buf,"_t%s%s",i,j);
			zzreplstr(buf);
			zzmore();
			UsedOldStyleAttrib = 1;
			if ( UsedNewStyleLabel )
			err("cannot mix old-style $i with new-style labels");
		}
	>>

$[_a-zA-Z][_a-zA-Z0-9]*
	<<
		NLA = 48;
		{ static char buf[300]; LabelEntry *el;
			zzbegexpr[0] = ' ';
			if ( CurRule != NULL &&
			strcmp(CurRule, &zzbegexpr[1])==0 ) {
				if ( !GenCC ) zzreplstr("zzaRet");
			}
			else if ( CurRetDef != NULL &&
			strmember(CurRetDef, &zzbegexpr[1])) {
				if ( HasComma( CurRetDef ) ) {
					require (strlen(zzbegexpr)<=(size_t)285,
					"$retval attrib ref too big");
					sprintf(buf,"_retv.%s",&zzbegexpr[1]);
					zzreplstr(buf);
				}
				else zzreplstr("_retv");
			}
			else if ( CurParmDef != NULL &&
			strmember(CurParmDef, &zzbegexpr[1])) {
			;
		}
		else if ( Elabel==NULL ) {
		{ err("$-variables in actions outside of rules are not allowed"); }
	} else if ( (el=(LabelEntry *)hash_get(Elabel, &zzbegexpr[1]))!=NULL ) {
	if ( GenCC && (el->elem==NULL || el->elem->ntype==nRuleRef) )
	{ err(eMsg1("There are no token ptrs for rule references: '$%s'",&zzbegexpr[1])); }
}
else
warn(eMsg1("$%s not parameter, return value, or element label",&zzbegexpr[1]));
}
zzmore();
	>>

#0
	<<
		NLA = 49;
		zzreplstr("(*_root)"); zzmore(); chkGTFlag();   
	>>

#\[\]
	<<
		NLA = 50;
		if ( GenCC ) {zzreplstr("(new AST)");}
		else {zzreplstr("zzastnew()");} zzmore();
		chkGTFlag();
	>>

#\(\)
	<<
		NLA = 51;
		zzreplstr("NULL"); zzmore(); chkGTFlag();   
	>>

#[0-9]+
	<<
		NLA = 52;
		{
			static char buf[100];
			if ( strlen(zzbegexpr)>(size_t)85 )
			fatal("#i AST ref too big");
			if ( GenCC ) sprintf(buf,"_ast%d%s",BlkLevel-1,zzbegexpr+1);
			else sprintf(buf,"zzastArg(%s)",zzbegexpr+1);
			zzreplstr(buf);
			zzmore();
			set_orel(atoi(zzbegexpr+1), &AST_nodes_refd_in_actions);
			chkGTFlag();
		}
	>>

#[_a-zA-Z][_a-zA-Z0-9]*
	<<
		NLA = 53;
		
		if ( !(strcmp(zzbegexpr, "#ifdef")==0 ||
		strcmp(zzbegexpr, "#if")==0 ||
		strcmp(zzbegexpr, "#else")==0 ||
		strcmp(zzbegexpr, "#endif")==0 ||
		strcmp(zzbegexpr, "#ifndef")==0 ||
		strcmp(zzbegexpr, "#define")==0 ||
		strcmp(zzbegexpr, "#pragma")==0 ||
		strcmp(zzbegexpr, "#undef")==0 ||
		strcmp(zzbegexpr, "#import")==0 ||
		strcmp(zzbegexpr, "#line")==0 ||
		strcmp(zzbegexpr, "#include")==0 ||
		strcmp(zzbegexpr, "#error")==0) )
		{
			static char buf[100];
			sprintf(buf, "%s_ast", zzbegexpr+1);
			zzreplstr(buf);
			chkGTFlag();
		}
		zzmore();
	>>

#\[
	<<
		NLA = 54;
		
		pushint(']');
		if ( GenCC ) zzreplstr("(new AST(");
		else zzreplstr("zzmk_ast(zzastnew(),");
		zzmore();
		chkGTFlag();
	>>

#\(
	<<
		NLA = 55;
		
		pushint('}');
		if ( GenCC ) zzreplstr("ASTBase::tmake(");
		else zzreplstr("zztmake(");
		zzmore();
		chkGTFlag();
	>>

#
	<<
		NLA = 56;
		zzmore();   
	>>

\)
	<<
		NLA = 57;
		
		if ( istackempty() )
		zzmore();
		else if ( topint()==')' ) {
			popint();
		}
		else if ( topint()=='}' ) {
			popint();
			/* terminate #(..) */
			zzreplstr(", NULL)");
		}
		zzmore();
	>>

\[
	<<
		NLA = 58;
		
		pushint('|');	/* look for '|' to terminate simple [...] */
		zzmore();
	>>

\(
	<<
		NLA = 59;
		
		pushint(')');
		zzmore();
	>>

\\\]
	<<
		NLA = 60;
		zzreplstr("]");  zzmore();   
	>>

\\\)
	<<
		NLA = 61;
		zzreplstr(")");  zzmore();   
	>>

\\>
	<<
		NLA = 62;
		if (! tokenActionActive) zzreplstr(">");	 /* MR1 */
		zzmore();				         /* MR1 */
	>>

'
	<<
		NLA = 63;
		zzmode(ACTION_CHARS); zzmore();  
	>>

\"
	<<
		NLA = 64;
		zzmode(ACTION_STRINGS); zzmore();  
	>>

\\$
	<<
		NLA = 65;
		zzreplstr("$");  zzmore();   
	>>

\\#
	<<
		NLA = 66;
		zzreplstr("#");  zzmore();   
	>>

\\[\n\r]
	<<
		NLA = 67;
		zzline++; zzmore();   
	>>

\\~[\]\)>$#]
	<<
		NLA = 68;
		zzmore();   
	>>

/
	<<
		NLA = 69;
		zzmore();   
	>>

/\*
	<<
		NLA = 70;
		zzmode(ACTION_COMMENTS); zzmore();   
	>>

\*/
	<<
		NLA = 71;
		warn("Missing /*; found dangling */ in action"); zzmore();   
	>>

//
	<<
		NLA = 72;
		zzmode(ACTION_CPP_COMMENTS); zzmore();   
	>>

~[\n\r\)\(\\$#\>\]\[\"'/]+
	<<
		NLA = 73;
		zzmore();   
	>>


%%PARSE_ENUM_FILE

@
	<<
		NLA = Eof;
		;   
	>>

[\t\ ]+
	<<
		NLA = 128;
		zzskip();   
	>>

[\n\r]
	<<
		NLA = 129;
		zzline++; zzskip();   
	>>

//
	<<
		NLA = 130;
		zzmode(TOK_DEF_CPP_COMMENTS); zzmore();   
	>>

/\*
	<<
		NLA = 131;
		zzmode(TOK_DEF_COMMENTS); zzskip();   
	>>

#ifdef
	<<
		NLA = 132;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#if
	<<
		NLA = 133;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#ifndef
	<<
		NLA = 134;
		;   
	>>

#else
	<<
		NLA = 135;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#endif
	<<
		NLA = 136;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#undef
	<<
		NLA = 137;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#import
	<<
		NLA = 138;
		zzmode(TOK_DEF_CPP_COMMENTS); zzskip();   
	>>

#define
	<<
		NLA = 140;
	>>

enum
	<<
		NLA = 142;
	>>

\{
	<<
		NLA = 143;
	>>

=
	<<
		NLA = 144;
	>>

,
	<<
		NLA = 145;
	>>

\}
	<<
		NLA = 146;
	>>

;
	<<
		NLA = 147;
	>>

[0-9]+
	<<
		NLA = INT;
	>>

[a-zA-Z_][_a-zA-Z0-9]*
	<<
		NLA = ID;
	>>

%%
